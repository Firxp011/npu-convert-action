name: NPU Model Conversion

on:
  workflow_dispatch:
    inputs:
      civitai_version_id:
        description: "Civitai modelVersionId (e.g. 90854). Can be found in URL bar."
        required: true
        type: string
      filename:
        description: "Save as (e.g. models/my.safetensors). Must end with .safetensors"
        required: true
        default: "models/model.safetensors"
        type: string
      clip_skip:
        description: "CLIP skip"
        required: true
        default: "2"
        type: choice
        options: ["1", "2"]
      min_soc:
        description: "min | 8gen1 | 8gen2"
        required: true
        default: "min"
        type: choice
        options: ["min", "8gen1", "8gen2"]
      reuse_preview_run_id:
        description: "Reuse preview-images artifact from this run-id (leave empty to regenerate)"
        required: false
        default: ""
        type: string
      reuse_preview_artifact_name:
        description: "Artifact name to reuse (usually 'preview-images')"
        required: false
        default: "preview-images"
        type: string

jobs:
  convert:
    runs-on: ubuntu-22.04
    timeout-minutes: 360
    steps:
      - name: Free up disk space
        run: |
          set -euo pipefail
          df -h
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /usr/share/swift || true
          sudo rm -rf /usr/local/.ghcup || true
          sudo rm -rf /usr/local/julia* || true
          sudo rm -rf /usr/local/share/powershell || true
          sudo rm -rf /usr/local/share/chromium || true
          sudo rm -rf /opt/microsoft || true
          sudo rm -rf /opt/google || true
          sudo docker system prune --all --force || true
          sudo docker builder prune --all --force || true
          df -h

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Prepare folders
        run: |
          mkdir -p models tools

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip curl

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Download npuconvert scripts
        run: |
          cd tools
          curl -L -o npuconvert.zip "https://chino.icu/local-dream/npuconvert.zip"
          unzip -q npuconvert.zip -d npuconvert
          echo "NPUCONVERT_DIR=$GITHUB_WORKSPACE/tools/npuconvert/npuconvert" >> $GITHUB_ENV

      - name: Download QNN SDK v2.28.0.241029
        run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE/qnn_sdk"
          cd "$GITHUB_WORKSPACE/qnn_sdk"
          curl -L -o qnn.zip "https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/qualcomm_neural_processing_sdk/v2.28.0.241029.zip"
          unzip -q qnn.zip
          
      - name: Fix npuconvert path and customize
        run: |
          set -euo pipefail
          BIN_FILE=$(find "$GITHUB_WORKSPACE/qnn_sdk" -type f -name "envsetup.sh" -print -quit || true)
          if [ -z "${BIN_FILE:-}" ]; then
            echo "### QNN envsetup.sh not found. Listing qnn_sdk structure ###"
            find "$GITHUB_WORKSPACE/qnn_sdk" -maxdepth 3 -mindepth 1 -print
            exit 1
          fi
          
          QNN_SDK_BIN="$(dirname "$BIN_FILE")"
          echo "### QNN_SDK_BIN: $QNN_SDK_BIN ###" 
          echo "QNN_SDK_BIN=$QNN_SDK_BIN" >> $GITHUB_ENV
          sed -i 's|cd /data/qairt/2.28.0.241029/bin|cd "$QNN_SDK_BIN"|' "$NPUCONVERT_DIR/scripts/convert_all.sh"
          
          if [ -f "$GITHUB_WORKSPACE/prepare_data.py" ]; then
            echo "### Overriding prepare_data.py with custom version ###"
            cp "$GITHUB_WORKSPACE/prepare_data.py" "$NPUCONVERT_DIR/prepare_data.py"
          else
            echo "### Skipping replacement ###"
          fi

      - name: (Optional) Download preview from previous run artifact
        if: ${{ inputs.reuse_preview_run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.reuse_preview_artifact_name }}
          run-id: ${{ inputs.reuse_preview_run_id }}
          path: preview-reuse
          github-token: ${{ github.token }}

      - name: (Optional) Place reused preview into NPUCONVERT_DIR
        if: ${{ inputs.reuse_preview_run_id != '' }}
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
      
          SRC_DIR="preview-reuse"
      
          # 1) data.pkl
          pkls=("$SRC_DIR"/**/data.pkl)
          if [ ${#pkls[@]} -eq 0 ]; then
            echo "::error :: data.pkl not found in reused artifact"
            exit 1
          fi
          cp "${pkls[0]}" "$NPUCONVERT_DIR/data.pkl"
      
          # 2) images/*.png
          mkdir -p "$NPUCONVERT_DIR/images"
          copied=0
          for f in "$SRC_DIR"/**/images/*.png; do
            cp "$f" "$NPUCONVERT_DIR/images/"
            copied=$((copied+1))
          done
          echo "Copied $copied preview images into \$NPUCONVERT_DIR/images"
      
          test -f "$NPUCONVERT_DIR/data.pkl" || { echo "::error :: data.pkl missing"; exit 1; }
          if [ "$copied" -eq 0 ]; then
            echo "::error :: No images were copied. VAE encoder input list will be empty."
            exit 1
          fi
      
          echo "images sample:"
          ls -lh "$NPUCONVERT_DIR/images" | head -n 10


      - name: Download model from Civitai
        env:
          CIVITAI_API_KEY: ${{ secrets.CIVITAI_API_KEY }}
        run: |
          set -euo pipefail
          VER_ID="${{ inputs.civitai_version_id }}"
          [ -n "$VER_ID" ] || { echo "You must provide civitai modelVersionId."; exit 1; }
          URL_INPUT="https://civitai.com/api/download/models/${VER_ID}"
          curl -L -H "Authorization: Bearer ${CIVITAI_API_KEY}" \
               -o "${{ inputs.filename }}" \
               --fail --retry 5 --retry-delay 5 \
               "$URL_INPUT"
          case "${{ inputs.filename }}" in
            *.safetensors) ;;
            *) echo "filename must end with .safetensors"; exit 1 ;;
          esac

      - name: Setup Python env with uv
        run: |
          cd "$NPUCONVERT_DIR"
          uv venv -p 3.10
          source .venv/bin/activate
          uv sync
          
      - name: Run (1) prepare_data.py
        if: ${{ inputs.reuse_preview_run_id == '' }}
        run: |
          set -euo pipefail
          cd "$NPUCONVERT_DIR"
          source .venv/bin/activate
          python prepare_data.py --model_path "$GITHUB_WORKSPACE/${{ inputs.filename }}" --clip_skip "${{ inputs.clip_skip }}"

      - name: Upload preview images
        uses: actions/upload-artifact@v4
        with:
          name: preview-images
          path: |
            ${{ env.NPUCONVERT_DIR }}/data.pkl
            ${{ env.NPUCONVERT_DIR }}/images/*.png
          if-no-files-found: ignore

      - name: Run (2) gen_quant_data.py
        run: |
          set -euo pipefail
          cd "$NPUCONVERT_DIR"
          source .venv/bin/activate
          python gen_quant_data.py

      - name: Run (3) export_onnx.py
        run: |
          set -euo pipefail
          cd "$NPUCONVERT_DIR"
          source .venv/bin/activate
          python export_onnx.py --model_path "$GITHUB_WORKSPACE/${{ inputs.filename }}" --clip_skip "${{ inputs.clip_skip }}"
      
      - name: Run (4) convert_all.sh
        env:
          QNN_CXXFLAGS: "-Wno-c99-designator -w"
          QNN_CFLAGS: "-Wno-c99-designator -w"
          ACTIONS_RUNNER_DEBUG: 'true'     # 額外 runner 診斷（可選）
        run: |
          set -euo pipefail
          cd "$NPUCONVERT_DIR"
          source .venv/bin/activate
          mkdir -p logs
      
          # 輕量記憶體監控，留下 OOM 前最後幾秒（很小的檔）
          nohup bash -c 'while true; do date; free -h; cat /proc/meminfo | head -n 10; sleep 5; done >> logs/memwatch.log 2>&1' &
          echo $! > logs/memwatch.pid
      
          # ⬇️ 子行程跑主流程，主殼不會跟著死
          ( bash scripts/convert_all.sh --min_soc "${{ inputs.min_soc }}" ) &
          MAIN_PID=$!
      
          wait $MAIN_PID
          rc=$?
      
          # 關監控
          if [ -f logs/memwatch.pid ]; then kill "$(cat logs/memwatch.pid)" || true; fi
      
          # 解析退出狀態 → 你就能分辨 timeout(124) / SIGKILL(137=多半 OOM) / SIGTERM(143)
          if [ $rc -ne 0 ]; then
            if [ $rc -eq 124 ]; then
              echo "::error :: stopped by timeout (124)"
            elif [ $rc -ge 128 ]; then
              sig=$((rc-128))
              echo "::error :: killed by signal $sig"
            else
              echo "::error :: exit code $rc"
            fi
            for f in logs/*.out logs/*.err logs/*.log; do
              [ -f "$f" ] && { echo "===== tail $f ====="; tail -n 80 "$f"; }
            done
            exit $rc
          fi

      - name: Upload QNN logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qnn-logs
          path: |
            ${{ env.NPUCONVERT_DIR }}/logs/
          if-no-files-found: warn


      - name: Package outputs
        run: |
          cd "$NPUCONVERT_DIR"
          OUTDIR=$(ls -d output/qnn_models_* | tail -n 1)
          test -d "$OUTDIR"
          zip -r npu_models.zip "$OUTDIR"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: npu_models
          path: ${{ env.NPUCONVERT_DIR }}/npu_models.zip
          if-no-files-found: error
